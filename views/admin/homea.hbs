<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <style>
        .user-card {
            transition: all 0.3s ease;
        }
        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
        .user-icon {
            font-size: 1.5rem;
            margin-right: 10px;
        }
        .admin-icon { color: #dc3545; }
        .pizzaiolo-icon { color: #fd7e14; }
        .user-icon { color: #0d6efd; }
        .online-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #28a745;
            display: inline-block;
            margin-right: 5px;
        }
        .time-connected {
            font-size: 0.8rem;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-dark bg-dark fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Admin Dashboard</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="offcanvas offcanvas-end text-bg-dark" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="offcanvasNavbarLabel">Menu</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link active" href="/home">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/users">Gestisci Utenti</a>
                        </li>
                    </ul>
                    <button class="btn btn-danger w-100" onclick="window.location.href='/logout'">Logout</button>
                </div>
            </div>
        </div>
    </nav>

    <div class="container mt-5 pt-5">
        <div class="row mb-4">
            <div class="col">
                <h2>Benvenuto, {{name}}!</h2>
                {{#if message}}
                <div class="alert alert-success">
                    {{message}}
                </div>
                {{/if}}
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="bi bi-people-fill me-2"></i>
                            Utenti Connessi
                        </h5>
                        <span class="badge bg-light text-dark" id="usersCount">0</span>
                    </div>
                    <div class="card-body">
                        <div class="row" id="activeUsersList">
                            <div class="col-12 text-center py-5" id="noUsersMessage">
                                <i class="bi bi-hourglass text-muted" style="font-size: 2rem;"></i>
                                <p class="mt-3 text-muted">In attesa di connessioni...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-header bg-success text-white">
                        <i class="bi bi-gear-fill me-2"></i>
                        Amministrazione
                    </div>
                    <div class="card-body">
                        <p>Gestisci gli utenti e le impostazioni della piattaforma.</p>
                        <a href="/admin/users" class="btn btn-outline-success mt-2">
                            <i class="bi bi-person-gear me-2"></i>
                            Gestisci Utenti
                        </a>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-header bg-info text-white">
                        <i class="bi bi-journal-code me-2"></i>
                        API Documentation
                    </div>
                    <div class="card-body">
                        <p>Esplora la documentazione delle API disponibili per gli sviluppatori.</p>
                        <a href="/swag" class="btn btn-outline-info mt-2">
                            <i class="bi bi-file-earmark-code me-2"></i>
                            Swagger UI
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Socket.io client -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Connessione WebSocket
        const socket = io();
        
        // DOM Elements
        const activeUsersList = document.getElementById('activeUsersList');
        const usersCount = document.getElementById('usersCount');
        const noUsersMessage = document.getElementById('noUsersMessage');
        
        // Formatta tempo di connessione
        function formatTimeConnected(connectedAt) {
            const now = new Date();
            const connected = new Date(connectedAt);
            const diffMs = now - connected;
            const diffMins = Math.floor(diffMs / 60000);
            
            if (diffMins < 1) return 'appena connesso';
            if (diffMins === 1) return '1 minuto fa';
            return `${diffMins} minuti fa`;
        }
        
        // Aggiorna la lista di utenti connessi
        function updateUsersList(users) {
            // Aggiorna contatore
            usersCount.textContent = users.length;
            
            // Mostra/nascondi messaggio "nessun utente"
            if (users.length === 0) {
                noUsersMessage.style.display = 'block';
                activeUsersList.innerHTML = '';
                return;
            } else {
                noUsersMessage.style.display = 'none';
            }
            
            // Svuota e ricrea la lista
            activeUsersList.innerHTML = '';
            
            // Aggiungi ogni utente alla lista
            users.forEach(user => {
                const iconClass = user.role === 'admin' ? 'bi-person-fill-gear admin-icon' : 
                                 (user.role === 'pizzaiolo' ? 'bi-person-workspace pizzaiolo-icon' : 'bi-person user-icon');
                
                const userCard = document.createElement('div');
                userCard.className = 'col-md-6 col-lg-4 mb-3';
                userCard.innerHTML = `
                    <div class="card user-card h-100">
                        <div class="card-body">
                            <h5 class="card-title">
                                <span class="online-indicator"></span>
                                <i class="bi ${iconClass} user-icon"></i>
                                ${user.username}
                            </h5>
                            <p class="card-text mb-1">
                                <span class="badge ${user.role === 'admin' ? 'bg-danger' : 
                                                     (user.role === 'pizzaiolo' ? 'bg-warning text-dark' : 'bg-primary')}">
                                    ${user.role}
                                </span>
                            </p>
                            <p class="time-connected">
                                <i class="bi bi-clock"></i> 
                                Connesso: ${formatTimeConnected(user.connectedAt)}
                            </p>
                        </div>
                    </div>
                `;
                
                activeUsersList.appendChild(userCard);
            });
        }
        
        // Ricevi aggiornamenti utenti dal server
        socket.on('activeUsers', updateUsersList);
        
        // Richiedi lista utenti all'avvio
        socket.emit('requestActiveUsers');
        
        // Aggiorna il timer ogni 30 secondi
        setInterval(() => {
            socket.emit('requestActiveUsers');
        }, 30000);
    </script>
</body>
</html>