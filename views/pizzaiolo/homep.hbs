<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home - Pizzaiolo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .navbar-brand {
            font-weight: 700;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .welcome-section {
            background: linear-gradient(120deg, #4361ee, #3f37c9);
            color: white;
            border-radius: 16px;
            padding: 40px 20px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        .welcome-section h2 {
            font-weight: 700;
            margin-bottom: 1rem;
            font-size: 2.5rem;
        }

        .welcome-section p {
            opacity: 0.9;
            font-size: 1.1rem;
            margin-bottom: 0;
        }

        .action-button {
            margin-top: 30px;
            padding: 15px 30px;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 50px;
            letter-spacing: 0.5px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .action-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

        .icon-large {
            font-size: 2.5rem;
            margin-bottom: 15px;
            opacity: 0.9;
        }

        .stats-card {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
        }

        .stats-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .stats-card .number {
            font-size: 2.5rem;
            font-weight: 700;
        }

        .stats-card .label {
            color: #6c757d;
            font-size: 1rem;
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-dark bg-dark fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <i class="bi bi-bicycle text-warning"></i> PonyGo
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar"
                aria-controls="offcanvasNavbar">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="offcanvas offcanvas-end text-bg-dark" tabindex="-1" id="offcanvasNavbar"
                aria-labelledby="offcanvasNavbarLabel">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="offcanvasNavbarLabel">
                        <i class="bi bi-menu-button-wide-fill me-2"></i> Menu
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas"
                        aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link" href="/home">
                                <i class="bi bi-house-door-fill me-2"></i> Home
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/pizzaiolo/orders/inpreparazione">
                                <i class="bi bi-hourglass-split me-2"></i> In preparazione
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/pizzaiolo/orders/pronto">
                                <i class="bi bi-check-circle-fill me-2"></i> Pronto
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/pizzaiolo/orders/consegnato">
                                <i class="bi bi-truck me-2"></i> Consegnate
                            </a>
                        </li>
                    </ul>
                    <button class="btn btn-danger w-100 mt-3" onclick="window.location.href='/logout'">
                        <i class="bi bi-box-arrow-right me-2"></i> Logout
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <div class="container mt-5 pt-5">
        <div class="welcome-section">
            <i class="bi bi-person-circle icon-large"></i>
            <h2>Benvenuto, <span id="username">{{name}}</span>!</h2>
            <p>Gestisci gli ordini per la tua pizzeria da questa dashboard.</p>
        </div>

        <div class="text-center">
            <button class="btn btn-success action-button mx-auto" onclick="window.location.href='/pizzaiolo/orders'">
                <i class="bi bi-list-check"></i> Visualizza tutti gli ordini
            </button>
        </div>

        <div class="row mt-5">
            <div class="col-md-4 mb-4">
                <div class="stats-card">
                    <i class="bi bi-hourglass-split text-warning icon-large"></i>
                    <div class="number text-warning" id="inPreparazioneCount">--</div>
                    <div class="label">In preparazione</div>
                    <a href="/pizzaiolo/orders/inpreparazione" class="btn btn-warning btn-sm mt-3">
                        <i class="bi bi-arrow-right"></i> Visualizza
                    </a>
                </div>
            </div>

            <div class="col-md-4 mb-4">
                <div class="stats-card">
                    <i class="bi bi-check-circle text-success icon-large"></i>
                    <div class="number text-success" id="prontoCount">--</div>
                    <div class="label">Pronti</div>
                    <a href="/pizzaiolo/orders/pronto" class="btn btn-success btn-sm mt-3">
                        <i class="bi bi-arrow-right"></i> Visualizza
                    </a>
                </div>
            </div>

            <div class="col-md-4 mb-4">
                <div class="stats-card">
                    <i class="bi bi-truck text-primary icon-large"></i>
                    <div class="number text-primary" id="consegnatoCount">--</div>
                    <div class="label">Consegnati</div>
                    <a href="/pizzaiolo/orders/consegnato" class="btn btn-primary btn-sm mt-3">
                        <i class="bi bi-arrow-right"></i> Visualizza
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Connessione Socket.IO con gestione real-time degli ordini
        const socket = io();
        
        // Funzione per aggiornare i contatori
        function updateOrderCounters() {
            fetch('/pizzaiolo/orders', {
                headers: {
                    'Accept': 'application/json'
                }
            })
            .then(response => response.json())
            .then(orders => {
                // Filtra gli ordini per stato
                const inPreparazione = orders.filter(order => order.status === 'in preparazione').length;
                const pronto = orders.filter(order => order.status === 'pronto').length;
                const consegnato = orders.filter(order => order.status === 'consegnato').length;
                
                // Aggiorna i contatori nella UI
                document.getElementById('inPreparazioneCount').textContent = inPreparazione;
                document.getElementById('prontoCount').textContent = pronto;
                document.getElementById('consegnatoCount').textContent = consegnato;
            })
            .catch(error => console.error('Errore nel recupero degli ordini:', error));
        }
        
        // Aggiorna i contatori all'avvio
        updateOrderCounters();
        
        // Ascolta eventi Socket.IO per gli ordini
        socket.on('new-order', () => {
            updateOrderCounters();
        });
        
        socket.on('order-updated', () => {
            updateOrderCounters();
        });
        
        socket.on('order-deleted', () => {
            updateOrderCounters();
        });
        
        // Visualizza una notifica quando arriva un nuovo ordine
        socket.on('new-order', (order) => {
            // Verifica il supporto per le notifiche
            if (!("Notification" in window)) {
                console.log("Questo browser non supporta le notifiche desktop");
            } else if (Notification.permission === "granted") {
                // Se le notifiche sono permesse, mostra la notifica
                createNotification(order);
            } else if (Notification.permission !== "denied") {
                // Altrimenti chiediamo il permesso
                Notification.requestPermission().then(permission => {
                    if (permission === "granted") {
                        createNotification(order);
                    }
                });
            }
        });
        
        // Funzione per creare notifiche desktop
        function createNotification(order) {
            const notification = new Notification("Nuovo Ordine", {
                icon: "/img/logo.png", // Assicurati di avere questa immagine
                body: `Nuovo ordine da ${order.customer}: ${order.quantity} ${order.pizza}`
            });
            
            notification.onclick = function() {
                window.focus();
                this.close();
            };
            
            // Chiudi la notifica automaticamente dopo 5 secondi
            setTimeout(() => {
                notification.close();
            }, 5000);
        }
    </script>
</body>

</html>