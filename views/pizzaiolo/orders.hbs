<!DOCTYPE html>
<html lang="it">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestione Ordini - Pizzaiolo</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <style>
    body {
      background-color: #f8f9fa;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .navbar-brand {
      font-weight: 700;
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .nav-link {
      font-weight: 500;
      position: relative;
    }

    .nav-link.active::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 2px;
      background-color: #ffffff;
      bottom: 0;
      left: 0;
    }

    .card {
      border: none;
      border-radius: 12px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
      transition: all 0.3s ease;
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.12);
    }

    .card-title {
      font-weight: 600;
      color: #333;
    }

    .btn {
      border-radius: 8px;
      padding: 8px 16px;
      font-weight: 500;
    }

    .btn-sm {
      border-radius: 6px;
      padding: 6px 12px;
    }

    .btn-primary {
      background-color: #4361ee;
      border-color: #4361ee;
    }

    .btn-success {
      background-color: #38b000;
      border-color: #38b000;
    }

    .btn-danger {
      background-color: #e63946;
      border-color: #e63946;
    }

    .offcanvas-body .nav-link {
      padding: 12px 16px;
      margin: 5px 0;
      border-radius: 8px;
    }

    .offcanvas-body .nav-link:hover {
      background-color: #343a40;
    }

    .list-group-item {
      padding: 12px 16px;
    }

    .list-group-item strong {
      color: #4361ee;
    }

    .welcome-section {
      background-color: #fff;
      border-radius: 12px;
      padding: 20px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      margin-bottom: 25px;
    }

    .card-footer {
      background-color: rgba(0, 0, 0, 0.03);
      font-style: italic;
      border-top: 1px solid rgba(0, 0, 0, 0.08);
    }

    .modal-content {
      border: none;
      border-radius: 12px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
    }

    .modal-header {
      border-bottom: 1px solid rgba(0, 0, 0, 0.08);
    }

    .modal-footer {
      border-top: 1px solid rgba(0, 0, 0, 0.08);
    }
  </style>
</head>

<body>
  <!-- Navbar -->
  <nav class="navbar navbar-dark bg-dark fixed-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <i class="bi bi-bicycle text-warning"></i> PonyGo
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar"
        aria-controls="offcanvasNavbar">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="offcanvas offcanvas-end text-bg-dark" tabindex="-1" id="offcanvasNavbar"
        aria-labelledby="offcanvasNavbarLabel">
        <div class="offcanvas-header">
          <h5 class="offcanvas-title" id="offcanvasNavbarLabel">
            <i class="bi bi-menu-button-wide-fill me-2"></i> Menu</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas"
            aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
          <ul class="navbar-nav me-auto">
            <li class="nav-item">
              <a class="nav-link" href="/home">
                <i class="bi bi-house-door-fill me-2"></i> Home
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/pizzaiolo/orders/inpreparazione">
                <i class="bi bi-hourglass-split me-2"></i> In preparazione
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/pizzaiolo/orders/pronto">
                <i class="bi bi-check-circle-fill me-2"></i> Pronto
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/pizzaiolo/orders/consegnato">
                <i class="bi bi-truck me-2"></i> Consegnate
              </a>
            </li>
          </ul>
          <button class="btn btn-danger w-100 mt-3" onclick="window.location.href='/logout'">
            <i class="bi bi-box-arrow-right me-2"></i> Logout
          </button>
        </div>
      </div>
    </div>
  </nav>

  <div class="container pt-5" style="margin-top: 70px !important;">
    <div class="welcome-section mb-4 mt-2">
      <div class="text-center d-flex justify-content-between align-items-center">
        <div></div>
        <div>
          <h2 class="mb-1">Benvenuto, <span class="text-primary" id="username">{{name}}</span>!</h2>
          <p class="mb-0 text-muted">Gestisci gli ordini attivi direttamente da questa pagina.</p>
        </div>
        <button class="btn btn-success btn-lg d-flex align-items-center gap-2" data-bs-toggle="modal" data-bs-target="#addOrderModal">
          <i class="bi bi-plus-lg"></i> Nuovo Ordine
        </button>
      </div>
    </div>
    
    <div class="row row-cols-1 row-cols-md-3 g-4">
      {{#each orders}}
      <div class="col">
        <div class="card h-100">
          <div class="card-body d-flex flex-column">
            <h5 class="card-title d-flex align-items-center gap-2">
              <i class="bi bi-person-circle text-primary"></i> {{customer}}
            </h5>
            <h6 class="card-subtitle mb-3 text-muted">Ordine #{{id}}</h6>
            <ul class="list-group list-group-flush mb-3">
              <li class="list-group-item d-flex align-items-center gap-2">
                <i class="bi bi-pizza text-danger"></i> <strong>Pizza:</strong> {{pizza}}
              </li>
              <li class="list-group-item d-flex align-items-center gap-2">
                <i class="bi bi-geo-alt-fill text-success"></i> <strong>Indirizzo:</strong> {{address}}
              </li>
              <li class="list-group-item d-flex align-items-center gap-2">
                <i class="bi bi-123 text-warning"></i> <strong>Quantità:</strong> {{quantity}}
              </li>
              <li class="list-group-item d-flex align-items-center gap-2">
                <i class="bi bi-chat-left-text text-info"></i> <strong>Note:</strong> {{notes}}
              </li>
              <li class="list-group-item d-flex align-items-center gap-2">
                <i class="bi bi-info-circle text-primary"></i> <strong>Stato:</strong> 
                <span class="badge {{#if (eq status 'in preparazione')}}bg-warning text-dark{{else if (eq status 'pronto')}}bg-success{{else}}bg-primary{{/if}} rounded-pill">
                  {{status}}
                </span>
              </li>
            </ul>
            <div class="mt-auto d-flex justify-content-between">
              <button class="btn btn-danger btn-sm d-flex align-items-center gap-1" onclick="deleteOrder({{id}})">
                <i class="bi bi-trash3-fill"></i> Elimina
              </button>
              <button class="btn btn-primary btn-sm d-flex align-items-center gap-1" data-bs-toggle="modal" data-bs-target="#editModal"
                onclick="populateModal({{id}}, '{{customer}}', '{{pizza}}', {{quantity}}, '{{notes}}', '{{address}}', '{{status}}')">
                <i class="bi bi-pencil-square"></i> Modifica
              </button>
            </div>
          </div>
          <div class="card-footer text-body-secondary d-flex align-items-center gap-2">
            <i class="bi bi-calendar3"></i> {{createdAt}}
          </div>
        </div>
      </div>
      {{/each}}
    </div>
  </div>

  <!-- Modal per aggiungere ordine -->
  <div class="modal fade" id="addOrderModal" tabindex="-1" aria-labelledby="addOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <form id="addOrderForm" class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addOrderModalLabel">
            <i class="bi bi-plus-circle me-2 text-success"></i> Aggiungi Nuovo Ordine
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="addCustomer" class="form-label">Cliente</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-person"></i></span>
              <input type="text" class="form-control" id="addCustomer" name="customer" required>
            </div>
          </div>
          <div class="mb-3">
            <label for="addAddress" class="form-label">Indirizzo</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
              <input type="text" class="form-control" id="addAddress" name="address" required>
            </div>
          </div>
          <div class="mb-3">
            <label for="addPizza" class="form-label">Pizza</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-circle"></i></span>
              <input type="text" class="form-control" id="addPizza" name="pizza" required>
            </div>
          </div>
          <div class="mb-3">
            <label for="addQuantity" class="form-label">Quantità</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-123"></i></span>
              <input type="number" class="form-control" id="addQuantity" name="quantity" required min="1" value="1">
            </div>
          </div>
          <div class="mb-3">
            <label for="addNotes" class="form-label">Note</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-chat-left"></i></span>
              <input type="text" class="form-control" id="addNotes" name="notes">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="bi bi-x-lg me-1"></i> Annulla
          </button>
          <button type="submit" class="btn btn-success">
            <i class="bi bi-check-lg me-1"></i> Aggiungi Ordine
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Modal per modifica ordine -->
  <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <form id="editOrderForm" class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editModalLabel">
            <i class="bi bi-pencil me-2 text-primary"></i> Modifica Ordine
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="editOrderId" name="id">
          <div class="mb-3">
            <label for="editCustomer" class="form-label">Cliente</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-person"></i></span>
              <input type="text" class="form-control" id="editCustomer" name="customer" required>
            </div>
          </div>
          <div class="mb-3">
            <label for="editAddress" class="form-label">Indirizzo</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
              <input type="text" class="form-control" id="editAddress" name="address" required>
            </div>
          </div>
          <div class="mb-3">
            <label for="editPizza" class="form-label">Pizza</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-circle"></i></span>
              <input type="text" class="form-control" id="editPizza" name="pizza" required>
            </div>
          </div>
          <div class="mb-3">
            <label for="editQuantity" class="form-label">Quantità</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-123"></i></span>
              <input type="number" class="form-control" id="editQuantity" name="quantity" required min="1">
            </div>
          </div>
          <div class="mb-3">
            <label for="editNotes" class="form-label">Note</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-chat-left"></i></span>
              <input type="text" class="form-control" id="editNotes" name="notes">
            </div>
          </div>
          <div class="mb-3">
            <label for="editStatus" class="form-label">Stato</label>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-check2-circle"></i></span>
              <select class="form-select" id="editStatus" name="status">
                <option value="in preparazione">In preparazione</option>
                <option value="pronto">Pronto</option>
                <option value="consegnato">Consegnato</option>
              </select>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="bi bi-x-lg me-1"></i> Annulla
          </button>
          <button type="submit" class="btn btn-primary">
            <i class="bi bi-check-lg me-1"></i> Salva modifiche
          </button>
        </div>
      </form>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Popola il modal con i dati dell'ordine selezionato
    function populateModal(id, customer, pizza, quantity, notes, address, status) {
      document.getElementById('editOrderId').value = id;
      document.getElementById('editCustomer').value = customer;
      document.getElementById('editPizza').value = pizza;
      document.getElementById('editQuantity').value = quantity;
      document.getElementById('editNotes').value = notes;
      document.getElementById('editAddress').value = address;
      document.getElementById('editStatus').value = status;
    }

    // Gestisce la modifica dell'ordine (PUT AJAX)
    document.getElementById('editOrderForm').addEventListener('submit', async function (e) {
      e.preventDefault();
      const id = document.getElementById('editOrderId').value;
      const data = {
        customer: document.getElementById('editCustomer').value,
        address: document.getElementById('editAddress').value,
        pizza: document.getElementById('editPizza').value,
        quantity: Number(document.getElementById('editQuantity').value),
        notes: document.getElementById('editNotes').value,
        status: document.getElementById('editStatus').value
      };
      const res = await fetch(`/pizzaiolo/orders/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (res.ok) {
        location.reload();
      } else {
        alert('Errore nella modifica dell\'ordine');
      }
    });

    // Gestisce l'eliminazione (DELETE AJAX)
    async function deleteOrder(id) {
      if (confirm('Sei sicuro di voler eliminare questo ordine?')) {
        const res = await fetch(`/pizzaiolo/orders/${id}`, { method: 'DELETE' });
        if (res.ok) {
          location.reload();
        } else {
          alert('Errore nell\'eliminazione dell\'ordine');
        }
      }
    }

    // Gestisce l'aggiunta di un ordine (POST AJAX)
    document.getElementById('addOrderForm').addEventListener('submit', async function (e) {
      e.preventDefault();
      const data = {
        customer: document.getElementById('addCustomer').value,
        address: document.getElementById('addAddress').value,
        pizza: document.getElementById('addPizza').value,
        quantity: Number(document.getElementById('addQuantity').value),
        notes: document.getElementById('addNotes').value
      };
      const res = await fetch('/pizzaiolo/orders', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (res.ok) {
        location.reload();
      } else {
        alert('Errore nell\'aggiunta dell\'ordine');
      }
    });
  </script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Connessione Socket.IO con gestione real-time degli ordini
    const socket = io();
    
    // Crea una notifica toast
    function createToast(title, message, type = 'info') {
      const toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      toastContainer.style.zIndex = '11';
      
      const toastElement = document.createElement('div');
      toastElement.className = `toast align-items-center text-white bg-${type} border-0`;
      toastElement.setAttribute('role', 'alert');
      toastElement.setAttribute('aria-live', 'assertive');
      toastElement.setAttribute('aria-atomic', 'true');
      
      const toastContent = document.createElement('div');
      toastContent.className = 'd-flex';
      
      const toastBody = document.createElement('div');
      toastBody.className = 'toast-body';
      toastBody.innerHTML = `<strong>${title}</strong> ${message}`;
      
      const closeButton = document.createElement('button');
      closeButton.type = 'button';
      closeButton.className = 'btn-close btn-close-white me-2 m-auto';
      closeButton.setAttribute('data-bs-dismiss', 'toast');
      closeButton.setAttribute('aria-label', 'Close');
      
      toastContent.appendChild(toastBody);
      toastContent.appendChild(closeButton);
      toastElement.appendChild(toastContent);
      toastContainer.appendChild(toastElement);
      document.body.appendChild(toastContainer);
      
      const toast = new bootstrap.Toast(toastElement);
      toast.show();
      
      // Rimuovi il toast dopo che è stato nascosto
      toastElement.addEventListener('hidden.bs.toast', function () {
        toastContainer.remove();
      });
    }
    
    // Aggiungi un nuovo ordine in tempo reale alla UI
    function addOrderToUI(order) {
      const ordersContainer = document.querySelector('.row.row-cols-1');
      
      const colDiv = document.createElement('div');
      colDiv.className = 'col';
      colDiv.id = `order-${order.id}`;
      
      let statusBadgeClass = '';
      if (order.status === 'in preparazione') {
        statusBadgeClass = 'bg-warning text-dark';
      } else if (order.status === 'pronto') {
        statusBadgeClass = 'bg-success';
      } else {
        statusBadgeClass = 'bg-primary';
      }
      
      colDiv.innerHTML = `
        <div class="card h-100">
          <div class="card-body d-flex flex-column">
            <h5 class="card-title d-flex align-items-center gap-2">
              <i class="bi bi-person-circle text-primary"></i> ${order.customer}
            </h5>
            <h6 class="card-subtitle mb-3 text-muted">Ordine #${order.id}</h6>
            <ul class="list-group list-group-flush mb-3">
              <li class="list-group-item d-flex align-items-center gap-2">
                <i class="bi bi-pizza text-danger"></i> <strong>Pizza:</strong> ${order.pizza}
              </li>
              <li class="list-group-item d-flex align-items-center gap-2">
                <i class="bi bi-geo-alt-fill text-success"></i> <strong>Indirizzo:</strong> ${order.address}
              </li>
              <li class="list-group-item d-flex align-items-center gap-2">
                <i class="bi bi-123 text-warning"></i> <strong>Quantità:</strong> ${order.quantity}
              </li>
              <li class="list-group-item d-flex align-items-center gap-2">
                <i class="bi bi-chat-left-text text-info"></i> <strong>Note:</strong> ${order.notes || ''}
              </li>
              <li class="list-group-item d-flex align-items-center gap-2">
                <i class="bi bi-info-circle text-primary"></i> <strong>Stato:</strong> 
                <span class="badge ${statusBadgeClass} rounded-pill">
                  ${order.status}
                </span>
              </li>
            </ul>
            <div class="mt-auto d-flex justify-content-between">
              <button class="btn btn-danger btn-sm d-flex align-items-center gap-1" onclick="deleteOrder(${order.id})">
                <i class="bi bi-trash3-fill"></i> Elimina
              </button>
              <button class="btn btn-primary btn-sm d-flex align-items-center gap-1" data-bs-toggle="modal" data-bs-target="#editModal"
                onclick="populateModal(${order.id}, '${order.customer}', '${order.pizza}', ${order.quantity}, '${order.notes || ''}', '${order.address}', '${order.status}')">
                <i class="bi bi-pencil-square"></i> Modifica
              </button>
            </div>
          </div>
          <div class="card-footer text-body-secondary d-flex align-items-center gap-2">
            <i class="bi bi-calendar3"></i> ${new Date().toLocaleString('it-IT')}
          </div>
        </div>
      `;
      
      ordersContainer.prepend(colDiv);
      colDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
      
      // Evidenzia l'ordine nuovo
      setTimeout(() => {
        const card = colDiv.querySelector('.card');
        card.style.backgroundColor = '#e8f5e9';
        setTimeout(() => {
          card.style.transition = 'background-color 1s ease';
          card.style.backgroundColor = '';
        }, 100);
      }, 100);
    }
    
    // Aggiorna un ordine esistente nell'interfaccia
    function updateOrderInUI(order) {
      const orderElement = document.getElementById(`order-${order.id}`);
      if (orderElement) {
        // Aggiorna solo le parti rilevanti dell'ordine (es. stato)
        const statusBadge = orderElement.querySelector('.badge');
        if (statusBadge) {
          statusBadge.className = `badge rounded-pill`;
          if (order.status === 'in preparazione') {
            statusBadge.classList.add('bg-warning', 'text-dark');
          } else if (order.status === 'pronto') {
            statusBadge.classList.add('bg-success');
          } else {
            statusBadge.classList.add('bg-primary');
          }
          statusBadge.textContent = order.status;
          
          // Evidenzia la modifica
          const card = orderElement.querySelector('.card');
          card.style.backgroundColor = '#e3f2fd';
          setTimeout(() => {
            card.style.transition = 'background-color 1s ease';
            card.style.backgroundColor = '';
          }, 100);
        }
      }
    }
    
    // Ascolta eventi Socket.IO per gli ordini
    socket.on('new-order', (order) => {
      createToast('Nuovo ordine!', `Ricevuto ordine da ${order.customer}`, 'success');
      addOrderToUI(order);
    });
    
    socket.on('order-updated', (order) => {
      createToast('Ordine aggiornato', `L'ordine #${order.id} è stato aggiornato`, 'info');
      updateOrderInUI(order);
    });
    
    socket.on('order-deleted', (orderId) => {
      const orderElement = document.getElementById(`order-${orderId}`);
      if (orderElement) {
        orderElement.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
        orderElement.style.opacity = '0';
        orderElement.style.transform = 'scale(0.8)';
        setTimeout(() => {
          orderElement.remove();
        }, 500);
      }
    });
  </script>
</body>

</html>